#!/usr/bin/python

#   dropping_server
#
#   Created on: April 17, 2015
#   Authors:   Francisco Vina
#             fevb <at> kth.se
#

#  Copyright (c) 2015, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import moveit_commander
import pr2_moveit_utils.pr2_moveit_utils as pr2_moveit_utils
import numpy as np
import amazon_challenge_bt_actions.msg
import actionlib
from std_msgs.msg import String
from calibrateBase import baseMove
from amazon_challenge_motion.bt_motion import BTMotion
from pr2_controllers_msgs.msg import Pr2GripperCommand
from geometry_msgs.msg import Pose
import random
from moveit_commander import PlanningSceneInterface
from geometry_msgs.msg import PoseStamped
import PyKDL as kdl
from tf_conversions import posemath
import copy


class DroppingAction(BTMotion):

   def execute_cb(self, goal):

       self.init_cb()

       # publish info to the console for the user
       rospy.loginfo('[dropping_server]: started action')
       self._success = True

       # read dictionary
       while not rospy.is_shutdown():
           try:
               left_arm_joint_pos_dict = rospy.get_param('/left_arm_joint_pos_dict')
               right_arm_joint_pos_dict = rospy.get_param('/right_arm_joint_pos_dict')
               arms_joint_pos_dict = {'left_arm': left_arm_joint_pos_dict, 'right_arm': right_arm_joint_pos_dict}
               torso_joint_pos_dict = rospy.get_param('/torso_joint_pos_dict')
               base_pos_dict = rospy.get_param('/base_pos_dict')


               order_bin_params = rospy.get_param('/order_bin')
               order_bin_size = order_bin_params['size']

               dropping_height = rospy.get_param('/dropping_height', 0.255)
               break
           except:
               rospy.sleep(random.uniform(0,2))
               continue


       # start executing the action

       ######################################
       # move base to drop position

       base_pos_goal = base_pos_dict['drop']
       rospy.loginfo('[dropping_server]: moving base to drop position')


       if not self.go_base_pos_async(base_pos_goal):
           return


       ######################################
       # add collision model of grasped object
       planning_scene = PlanningSceneInterface()


       size = []
       if self._item == 'cheezit_big_original':
           size = [0.24, 0.06, 0.06]

       elif self._item == 'oreo_mega_stuf':
           size = [0.15, 0.04, 0.04]


       elif self._item == 'crayola_64_ct':
           size = [0.25, 0.05, 0.05]


       else:
           size = [0.15, 0.04, 0.04]


       F_object = kdl.Frame(kdl.Rotation.Identity(), kdl.Vector(size[0]*0.5 + self._tool_size[0] + 0.016, 0.0, 0.0))
       object_pose = PoseStamped()
       object_pose.pose = copy.deepcopy(posemath.toMsg(F_object))
       object_pose.header.frame_id = 'l_gripper_tool_frame'
       object_pose.header.stamp = rospy.Time.now()

       planning_scene.attach_box('grasped_object_link', 'grasped_object', object_pose, size)
       rospy.sleep(1.0)

       if self.execute_exit():
           return


       ######################################
       # move left arm to drop position

       rospy.loginfo('[dropping_server]: moving left_arm to drop pos')

       if self._item == 'cheezit_big_original':
           drop_pose = kdl.Frame(kdl.Rotation(0.0, np.pi*0.5, -np.pi*0.5))


       joint_pos_goal =  left_arm_joint_pos_dict['drop']

       if not self.go_joint_goal_async(self._left_arm, joint_pos_goal, True):
           return


       ######################################
       # remove collision object

       planning_scene.remove_attached_object('grasped_object_link', 'grasped_object')
       rospy.sleep(1.0)

       if self.execute_exit():
           return



       ######################################
       # move left arm down
       rospy.loginfo('[dropping_server]: moving left arm down for dropping')
       # calculate how much to go down
       z_init = self._left_arm.get_current_pose().pose.position.z

       z_desired = dropping_height # maximum 30 cm dropping height
       self.move_l_arm_z(z_desired)


       ######################################
       # release gripper

       rospy.loginfo('[dropping_server]: opening gripper')
       if not self.open_l_gripper():
           return

       ######################################
       # move left arm back up

       rospy.loginfo('[dropping_server]: moving left arm up')
       # calculate where to go up
       z_desired = z_init
       self.move_l_arm_z(z_desired)



       #IF THE ACTION HAS SUCCEEDED

       self.set_status('SUCCESS')
       self._timer.shutdown()
       return


if __name__ == "__main__":

    rospy.init_node('dropping_server')
    DroppingAction(rospy.get_name())
    rospy.spin()