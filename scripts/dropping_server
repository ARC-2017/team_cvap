#!/usr/bin/env python

#   dropping_server
#
#   Created on: April 17, 2015
#   Authors:   Francisco Vina
#             fevb <at> kth.se
#

#  Copyright (c) 2015, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import moveit_commander
import pr2_moveit_utils.pr2_moveit_utils as pr2_moveit_utils
import numpy as np
import amazon_challenge_bt_actions.msg
import actionlib
from std_msgs.msg import String
from calibrateBase import baseMove
from amazon_challenge_motion.bt_motion import BTMotion
from pr2_controllers_msgs.msg import Pr2GripperCommand


class DroppingAction(BTMotion):

   def execute_cb(self, goal):
        # publish info to the console for the user
        rospy.loginfo('[dropping_server]: started action')
        self._success = True

        # read dictionary
        left_arm_joint_pos_dict = rospy.get_param('/left_arm_joint_pos_dict')
        right_arm_joint_pos_dict = rospy.get_param('/right_arm_joint_pos_dict')
        arms_joint_pos_dict = {'left_arm': left_arm_joint_pos_dict, 'right_arm': right_arm_joint_pos_dict}
        torso_joint_pos_dict = rospy.get_param('/torso_joint_pos_dict')
        base_pos_dict = rospy.get_param('/base_pos_dict')

        order_bin_params = rospy.get_param('/order_bin')
        order_bin_size = order_bin_params['size']

        # start executing the action

        ######################################
        # move base to drop_1 position (to the right)

        base_pos_goal = base_pos_dict['drop_1']
        rospy.loginfo('[dropping_server]: moving base to drop_1 position')


        self.go_base_pos_async(base_pos_goal)


        ######################################
        # move base to drop position (backwards)

        base_pos_goal = base_pos_dict['drop']
        rospy.loginfo('[dropping_server]: moving base to drop position')


        self.go_base_pos_async(base_pos_goal)


        ######################################
        # move torso to drop position (high, to avoid collisions with bin)

        joint_pos_goal = torso_joint_pos_dict['drop_1']
        rospy.loginfo('[dropping_server]: moving torso to drop_1 position')

        if not self.go_joint_goal_async(self._torso, joint_pos_goal):
            self.set_status('FAILURE')
            return


        ######################################
        # move left arm to drop position

        rospy.loginfo('[dropping_server]: moving left_arm to drop pos')
        joint_pos_goal =  left_arm_joint_pos_dict['drop']

        if not self.go_joint_goal_async(self._left_arm, joint_pos_goal, True):
            self.set_status('FAILURE')
            return


        ######################################
        # move left arm in bin (z, y) direction depending on object for dropping

        # TODO

        ######################################
        # move left arm down to 0.41 cm height (x direction)

        # calculate how much to go down
        h_torso = torso_joint_pos_dict['drop_1'][0] - torso_joint_pos_dict['drop'][0]

        pose = self._left.get_current_pose()

        pose.pose.position.z


        ######################################
        # move torso down

        joint_pos_goal = torso_joint_pos_dict['drop']
        rospy.loginfo('[dropping_server]: moving base to drop position')

        if not self.go_joint_goal_async(self._torso, joint_pos_goal):
            self.set_status('FAILURE')
            return

        ######################################
        # check current end effector pose to make sure its low enough





        #IF THE ACTION HAS SUCCEEDED

        self.set_status('SUCCESS')
        return


if __name__ == "__main__":

    rospy.init_node('dropping_server')
    DroppingAction(rospy.get_name())
    rospy.spin()