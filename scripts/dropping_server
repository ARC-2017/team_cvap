#!/usr/bin/python

#   dropping_server
#
#   Created on: April 17, 2015
#   Authors:   Francisco Vina
#             fevb <at> kth.se
#

#  Copyright (c) 2015, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import numpy as np
from amazon_challenge_motion.bt_motion import BTMotion
import random
from geometry_msgs.msg import PoseStamped
import PyKDL as kdl
from tf_conversions import posemath
import copy
import random


class DroppingAction(BTMotion):

   def execute_cb(self, goal):

       self.init_as()

       # publish info to the console for the user
       rospy.loginfo('[dropping_server]: started action')
       self._success = True

       # read dictionary
       while not rospy.is_shutdown():
           try:
               left_arm_joint_pos_dict = rospy.get_param('/left_arm_joint_pos_dict')
               right_arm_joint_pos_dict = rospy.get_param('/right_arm_joint_pos_dict')
               arms_joint_pos_dict = {'left_arm': left_arm_joint_pos_dict, 'right_arm': right_arm_joint_pos_dict}
               torso_joint_pos_dict = rospy.get_param('/torso_joint_pos_dict')
               base_pos_dict = rospy.get_param('/base_pos_dict')


               order_bin_params = rospy.get_param('/order_bin')
               order_bin_size = order_bin_params['size']

               self._dropping_height = rospy.get_param('/dropping_height', 0.255)
               self._dropping_poses_dict = rospy.get_param('/dropping_poses', 0.255)
               break
           except:
               rospy.sleep(random.uniform(0,2))
               continue


       # start executing the action

       ######################################
       # move base to drop position

       if (base_pos_dict['drop']).has_key(self._item):
           base_pos_goal = base_pos_dict['drop'][self._item]
       else:
           base_pos_goal = base_pos_dict['drop']['default']
       rospy.loginfo('[dropping_server]: moving base to drop position for item ' + self._item)

       if self._torso.get_current_joint_values()[0] < 0.1:
           base_pos_goal[1] = base_pos_dict['drop']['low_torso_y']

       if not self.go_base_pos_async(base_pos_goal):
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return

       if not self.go_base_pos_async(base_pos_goal):
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return


       ######################################
       # add collision model of grasped object

       self.add_grasped_object_collision_model()

       if self.execute_exit():
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return


       ######################################
       # move left arm to drop position and try dropping

       rospy.loginfo('[dropping_server]: moving left_arm to drop pos')

       (pose_base_wrist, success) = self.dropping_pose()

       if not success:
           rospy.logerr('[dropping_server]: could not find dropping pose!')
           self._exit = True
           if self.execute_exit():
               self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
               self._planning_scene.remove_world_object('grasped_object')
               self.finish_as()
               return


       # pose of the wrist in order bin frame

       # p_tol = self._left_arm.get_goal_position_tolerance()
       # o_tol = self._left_arm.get_goal_orientation_tolerance()
       #
       #
       # self._left_arm.set_goal_position_tolerance(0.01)
       # self._left_arm.set_goal_orientation_tolerance((np.pi/180)*4.0
       #
       self._left_arm.set_goal_position_tolerance(0.01)
       self._left_arm.set_goal_orientation_tolerance((np.pi/180)*5.0)

       pose_base_wrist.header.stamp = rospy.Time.now()

       self._left_arm.set_pose_target(pose_base_wrist)
       while not self._left_arm.go():

           if self._timer_started:
               while not rospy.is_shutdown():
                   if self.execute_exit():
                       self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                       self._planning_scene.remove_world_object('grasped_object')
                       self.finish_as()
                       return

                   rospy.sleep(1.0)

               if rospy.is_shutdown():
                   self._exit = True
                   if self.execute_exit():
                       self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                       self._planning_scene.remove_world_object('grasped_object')
                       self.finish_as()
                       return


           (pose_base_wrist, success) = self.dropping_pose(True)

           if not success:
               rospy.logerr('[dropping_server]: could not find dropping pose!')
               self._exit = True
               if self.execute_exit():
                   self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                   self._planning_scene.remove_world_object('grasped_object')
                   self.finish_as()
                   return
           pose_base_wrist.header.stamp = rospy.Time.now()
           self._left_arm.set_pose_target(pose_base_wrist)

       # self._left_arm.set_goal_position_tolerance(p_tol)
       # self._left_arm.set_goal_orientation_tolerance(o_tol)


       ######################################
       # remove collision object

       # self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
       # rospy.sleep(1.0)

       if self.execute_exit():
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return



       ######################################
       # move left arm down
       rospy.loginfo('[dropping_server]: moving left arm down for dropping')
       # calculate how much to go down
       z_init = self._left_arm.get_current_pose().pose.position.z

       z_desired = self._dropping_height # maximum 30 cm dropping height
       while not self.move_l_arm_z(z_desired + random.uniform(-0.02, 0.0)):

           rospy.logerr('[dropping_server]: failed moving left arm down, retrying from different pose')

           if self.execute_exit():
               self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
               self._planning_scene.remove_world_object('grasped_object')
               self.finish_as()
               return

           self.add_grasped_object_collision_model()

           self._left_arm.set_pose_target(pose_base_wrist)
           while not self._left_arm.go():

               if self._timer_started:
                   while not rospy.is_shutdown():
                       if self.execute_exit():
                           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                           self._planning_scene.remove_world_object('grasped_object')
                           self.finish_as()
                           return

                       rospy.sleep(1.0)

                   if rospy.is_shutdown():
                       self._exit = True
                       if self.execute_exit():
                           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                           self._planning_scene.remove_world_object('grasped_object')
                           self.finish_as()
                           return


               (pose_base_wrist, success) = self.dropping_pose(True)
               if not success:
                   rospy.logerr('[dropping_server]: could not find dropping pose!')
                   self._exit = True
                   if self.execute_exit():
                       self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
                       self._planning_scene.remove_world_object('grasped_object')
                       self.finish_as()
                       return

               self._left_arm.set_pose_target(pose_base_wrist)


           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           rospy.sleep(1.0)


       ######################################
       # release gripper
       print 'dropping height: ', self._left_arm.get_current_pose().pose.position.z-self._length_tool
       rospy.loginfo('[dropping_server]: opening gripper')
       if not self.open_l_gripper():
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return

       ######################################
       # move left arm back up

       rospy.loginfo('[dropping_server]: moving left arm up')
       # calculate where to go up
       z_desired = z_init
       while not self.move_l_arm_z(z_desired + random.uniform(-0.03, 0.03)):
           rospy.logerr('[dropping_server]: could not move left arm up.. retrying')


       ######################################
       # remove collision object

       self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
       self._planning_scene.remove_world_object('grasped_object')
       rospy.sleep(1.0)

       if self.execute_exit():
           self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
           self._planning_scene.remove_world_object('grasped_object')
           self.finish_as()
           return

       #IF THE ACTION HAS SUCCEEDED

       self.set_status('SUCCESS')
       self._timer.shutdown()
       self._planning_scene.remove_attached_object('l_wrist_roll_link', 'grasped_object')
       self._planning_scene.remove_world_object('grasped_object')
       self.finish_as()
       return

   def add_grasped_object_collision_model(self):

       self._size = []
       if self._item == 'cheezit_big_original':
           self._size = [0.24, 0.06, 0.16]

       elif self._item == 'oreo_mega_stuf':
           self._size = [0.24, 0.04, 0.15]


       elif self._item == 'crayola_64_ct':
           self._size = [0.15, 0.05, 0.13]


       else:
           self._size = [0.15, 0.04, 0.15]


       F_object = kdl.Frame(kdl.Rotation.Identity(), kdl.Vector(self._size[0]*0.5 + self._length_tool + 0.02 , 0.0, 0.0))
       object_pose = PoseStamped()
       object_pose.pose = copy.deepcopy(posemath.toMsg(F_object))
       object_pose.header.frame_id = 'l_wrist_roll_link'
       object_pose.header.stamp = rospy.Time.now()

       if self._timer_started:
           while not rospy.is_shutdown():
               if self.execute_exit():
                   return
               rospy.sleep(1.0)

           if rospy.is_shutdown():
               self._exit = True
               if self.execute_exit():
                   return

       self._planning_scene.attach_box('l_wrist_roll_link', 'grasped_object', object_pose, self._size)
       rospy.sleep(1.0)

   def dropping_pose(self, randomize=False):

       if self._dropping_poses_dict.has_key(self._item):
           pose = self._dropping_poses_dict[self._item]

       else:
           pose = self._dropping_poses_dict['default']

       F_bin_wrist = kdl.Frame(kdl.Rotation.RPY(pose[3], pose[4], pose[5]), kdl.Vector(pose[0], pose[1], pose[2]))

       F_bin_wrist.p[2] = F_bin_wrist.p[2] + self._dropping_height + 0.05 + self._size[0] + self._length_tool

       # if randomize is True, then add a small random offset in position
       if randomize:
           if self._item == 'cheezit_big_original':
               F_bin_wrist.p[0] = F_bin_wrist.p[0] + random.uniform(0.0, 0.06)

           elif self._item == 'oreo_mega_stuf':
               F_bin_wrist.p[0] = F_bin_wrist.p[0] + random.uniform(-0.06, 0.0)

           else:
               F_bin_wrist.p[0] = F_bin_wrist.p[0] + random.uniform(-0.06, 0.06)

           F_bin_wrist.p[2] = F_bin_wrist.p[2] + random.uniform(-0.02, 0.0)

       pose_bin_wrist = PoseStamped()
       pose_bin_wrist.pose = posemath.toMsg(F_bin_wrist)
       pose_bin_wrist.header.frame_id = 'order_bin'
       pose_bin_wrist.header.stamp = rospy.Time(0)


       # transform pose to base link frame
       r = rospy.Rate(1.0)
       while not rospy.is_shutdown():

           if self.execute_exit():
               return (PoseStamped(), False)

           try:
               pose_base_wrist = self._tf_listener.transformPose('odom_combined', pose_bin_wrist)
               break

           except:
               r.sleep()

       if rospy.is_shutdown():
           self._exit = True
           if self.execute_exit():
               return

       return (pose_base_wrist, True)


if __name__ == "__main__":

    rospy.init_node('dropping_server')
    DroppingAction(rospy.get_name())
    rospy.spin()