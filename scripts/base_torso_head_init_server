#!/usr/bin/env python

#   base_torso_head_init_server
#
#   Created on: May 6, 2015
#   Authors:   Francisco Vina
#             fevb <at> kth.se
#

#  Copyright (c) 2015, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import moveit_commander
import pr2_moveit_utils.pr2_moveit_utils as pr2_moveit_utils
import numpy as np
import amazon_challenge_bt_actions.msg
import actionlib
from std_msgs.msg import String
from calibrateBase import baseMove
from amazon_challenge_motion.bt_motion import BTMotion
import random

class BaseTorsoHeadInitAction(BTMotion):

    def execute_cb(self, goal):
        self._exit=False
        rospy.Timer(rospy.Duration(self._timeout), self.timer_callback, oneshot=True)
        # publish info to the console for the user
        rospy.loginfo('[base_torso_head_init_server]: started action')
        self._success = True

        # read dictionary
        while not rospy.is_shutdown():
            try:
                left_arm_joint_pos_dict = rospy.get_param('/left_arm_joint_pos_dict')
                right_arm_joint_pos_dict = rospy.get_param('/right_arm_joint_pos_dict')
                arms_joint_pos_dict = {'left_arm': left_arm_joint_pos_dict, 'right_arm': right_arm_joint_pos_dict}
                torso_joint_pos_dict = rospy.get_param('/torso_joint_pos_dict')
                base_pos_dict = rospy.get_param('/base_pos_dict')
                head_joint_pos_dict = rospy.get_param('/head_joint_pos_dict')
                break
            except:
                rospy.sleep(random.uniform(0,2))
                continue


        # start executing the action


        ######################################
        # move arms to start pose

        rospy.loginfo('[base_torso_head_init_server]: moving arms to start pos')
        left_arm_joint_pos_goal = left_arm_joint_pos_dict['start']
        right_arm_joint_pos_goal = right_arm_joint_pos_dict['start']
        joint_pos_goal = left_arm_joint_pos_goal + right_arm_joint_pos_goal

        if not self.go_joint_goal_async(self._arms, joint_pos_goal, True):
            self.set_status('FAILURE')
            return


        ######################################
        # move torso to appropriate row

        # row = self.get_row()
        # rospy.loginfo('[base_torso_head_init_server]: moving torso to ' + row)
        # joint_pos_goal = torso_joint_pos_dict['pregrasp'][row]
        #
        # if not self.go_joint_goal_async(self._torso, joint_pos_goal):
        #     self.set_status('FAILURE')
        #     return

        #####################################
        # move base to appropriate column

        column = self.get_column()
        base_pos_goal = base_pos_dict[column]
        rospy.loginfo('[base_torso_head_init_server]: moving base to ' + column)

        self.go_base_pos_async(base_pos_goal)


        ######################################
        # move head to appropriate row
        row = self.get_row()
        joint_pos_goal = head_joint_pos_dict[row]

        rospy.loginfo('[base_torso_head_init_server]: moving head to ' + row)

        if not self.go_joint_goal_async(self._head, joint_pos_goal):
            self.set_status('FAILURE')
            return


        self.set_status('SUCCESS')
        return


if __name__ == "__main__":

    rospy.init_node('base_torso_head_init_server')
    BaseTorsoHeadInitAction(rospy.get_name())
    rospy.spin()