#!/usr/bin/env python

#   pose_initializer_action_server
#
#   Created on: April 13, 2015
#   Authors:   Francisco Vina
#             fevb <at> kth.se
#

#  Copyright (c) 2015, Francisco Vina, CVAP, KTH
#    All rights reserved.

#    Redistribution and use in source and binary forms, with or without
#    modification, are permitted provided that the following conditions are met:
#       * Redistributions of source code must retain the above copyright
#         notice, this list of conditions and the following disclaimer.
#       * Redistributions in binary form must reproduce the above copyright
#         notice, this list of conditions and the following disclaimer in the
#         documentation and/or other materials provided with the distribution.
#       * Neither the name of KTH nor the
#         names of its contributors may be used to endorse or promote products
#         derived from this software without specific prior written permission.

#    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
#    ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
#    WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#    DISCLAIMED. IN NO EVENT SHALL KTH BE LIABLE FOR ANY
#    DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
#    (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
#    LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#    ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#    SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import rospy
import moveit_commander
import pr2_moveit_utils.pr2_moveit_utils as pr2_moveit_utils
import numpy as np
import bt_actions.msg
import actionlib


class PoseInitializerAction(object):

  # create messages that are used to publish feedback/result
  _feedback = bt_actions.msg.BTFeedback()
  _result   = bt_actions.msg.BTResult()

  def __init__(self, name):
    self._action_name = name
    self._as = actionlib.SimpleActionServer(self._action_name, bt_actions.msg.BTAction, execute_cb=self.execute_cb, auto_start = False)
    self._as.start()

		  def execute_cb(self, goal):
		    # publish info to the console for the user
		    rospy.loginfo('Starting Action')

		    # start executing the action
		    while #your condition:
		      # check that preempt has not been requested by the client
		      if self._as.is_preempt_requested():
			#HERE THE CODE TO EXECUTE WHEN THE  BEHAVIOR TREE DOES HALT THE ACTION
			rospy.loginfo('Action Halted')
			self._as.set_preempted()
			success = False
			break

		      rospy.loginfo('Executing Action')
		      #HERE THE CODE TO EXECUTE AS LONG AS THE BEHAVIOR TREE DOES NOT HALT THE ACTION

		      #IF THE ACTION HAS SUCCEEDED
		      self.set_status('SUCCESS')
		      #IF THE ACTION HAS FAILED
		      self.set_status('FAILURE')



  def set_status(self,status):
      if status == 'SUCCESS':
        self._feedback.status = 1
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Succeeded' % self._action_name)
        self._as.set_succeeded(self._result)
      elif status == 'FAILURE':
        self._feedback.status = 2
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Failed' % self._action_name)
        self._as.set_succeeded(self._result)
      else:
        rospy.logerr('Action %s: has a wrong return status' % self._action_name)



if __name__ == "__main__":

    rospy.init_node('pose_initializer')

    left_arm = moveit_commander.MoveGroupCommander('left_arm')
    PoseInitializerAction(rospy.get_name())
    rospy.spin()