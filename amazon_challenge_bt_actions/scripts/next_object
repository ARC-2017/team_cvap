#!/usr/bin/env python


import rospy

import actionlib

import amazon_challenge_bt_actions.msg
from std_msgs.msg import String


class BTAction(object):
  # create messages that are used to publish feedback/result
  _feedback = amazon_challenge_bt_actions.msg.BTFeedback()
  _result   = amazon_challenge_bt_actions.msg.BTResult()

  def __init__(self, name):
    self._action_name = name
    self._as = actionlib.SimpleActionServer(self._action_name, amazon_challenge_bt_actions.msg.BTAction, execute_cb=self.execute_cb, auto_start = False)
    self._as.start()
    self.pub_detected = rospy.Publisher('object_detected', String, queue_size = 10)
    self.pub_posed = rospy.Publisher('arm_posed', String, queue_size = 10)
    self.pub_grasped = rospy.Publisher('object_grasped', String, queue_size = 10)    
    self.pub_dropped = rospy.Publisher('object_dropped', String, queue_size = 10)
    self.pub_rate = rospy.Rate(30)
    
  def execute_cb(self, goal):
    # helper variables
    r = rospy.Rate(1)
    success = True
    

    
    # publish info to the console for the user
    rospy.loginfo('Starting Action')
    
    # start executing the action
    for i in xrange(1, 2):
      # check that preempt has not been requested by the client
      if self._as.is_preempt_requested():
        rospy.loginfo('Action Halted')
        self._as.set_preempted()
        success = False
        break

      rospy.loginfo('Executing Action')

      client = actionlib.SimpleActionClient('objectslist', amazon_challenge_bt_actions.msg.ObjectsListAction)

        # Waits until the action server has started up and started
        # listening for goals.
      rospy.loginfo('Start Waiting')
      client.wait_for_server()

        # Creates a goal to send to the action server.
      goal = amazon_challenge_bt_actions.msg.ObjectsListGoal(parameter=3)

            # Sends the goal to the action server.
      client.send_goal(goal)
      rospy.loginfo('Goal Sent')
            # Waits for the server to finish performing the action.
      client.wait_for_result()
      self.pub_detected.publish("FAILURE")#resets the conditions for the current ojbect
      self.pub_posed.publish("FAILURE")
      self.pub_grasped.publish("FAILURE")
      self.pub_dropped.publish("FAILURE")
      self.pub_rate.sleep()

      self.set_status('FAILURE')
      # this step is not necessary, the sequence is computed at 1 Hz for demonstration purposes
      r.sleep()
      



    

  def set_status(self,status):
      if status == 'SUCCESS':
        self._feedback.status = 1
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Succeeded' % self._action_name)
        self._as.set_succeeded(self._result)
      elif status == 'FAILURE':
        self._feedback.status = 2
        self._result.status = self._feedback.status
        rospy.loginfo('Action %s: Failed' % self._action_name)
        self._as.set_succeeded(self._result)
      else:
        rospy.logerr('Action %s: has a wrong return status' % self._action_name)



if __name__ == '__main__':
  rospy.init_node('next_object')
  BTAction(rospy.get_name())
  rospy.spin()
