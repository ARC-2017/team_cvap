#!/usr/bin/env python

import json
import rospy
from std_msgs.msg import String
from std_msgs.msg import Int32

import actionlib  # needed to call receive_update whenever needed
import amazon_challenge_bt_actions.msg  # contains the action message for receive_update
from amazon_challenge_bt_actions.srv import *
import rospkg
from grasping.generate_object_dict import *


class TaskManager:
    # create messages that are used to publish feedback/result
    _feedback = amazon_challenge_bt_actions.msg.ObjectsListFeedback()
    _result = amazon_challenge_bt_actions.msg.ObjectsListResult()

    TASK_COMPLETED = 1
    TASK_CANCELLED = 2
    TASK_POSTPONED = 3
    # rospy.init_node('objectslist')


    def __init__(self):
        #Initialize the action (ACTIONLIB)
        rospy.init_node('objectslist')
        self._action_name = 'objectslist'

        self._as = actionlib.SimpleActionServer(self._action_name, amazon_challenge_bt_actions.msg.ObjectsListAction,
                                                execute_cb=self.receive_update, auto_start=False)
        self._as.start()
        self.objects_list = []
        self.data = []
        self.bins = {}
        self.bin_content = {}

        self.task_list = []
        self.object_dictionary = objDict()
        self.pub = rospy.Publisher('amazon_next_task', String, queue_size=0)
        self.bin_pub = rospy.Publisher('amazon_bin_items', String, queue_size=0)
        self.pub_rate = rospy.Rate(30)

    def add_bin_content(self, bin_id):
        content = self.data['bin_contents']
        items = content[bin_id]
        bin_items = []
        num_items = len(items)

        bin_str = "[" + str(num_items) + ","
        for i in range(0, num_items):
            bin_items.append(items[i])


            if i < num_items - 1:
                bin_str = bin_str + items[i] + ","
            else:
                bin_str = bin_str + items[i]

        bin_str += "]"
        self.bin_content[bin_id] = bin_items
        self.bins[bin_id] = bin_str


    def init_taks_list(self):
        tasks = self.data['work_order']
        for task in tasks:
            bin = task['bin']
            item = task['item']
            difficult = 0
            try:
                tmp_dic_entry = self.object_dictionary.getEntry(item)
                if not tmp_dic_entry[4]:
                    difficult = 1
                print(item + ' ' + str(tmp_dic_entry[4]))
            except Exception, e:
                difficult = 1
                print(item + ' not in the dictionary ')
                print(e)

            data = self.bins[bin].replace('[', ',').split(',')

            t = [data[1], item, bin, difficult]
            self.task_list.append(t)

        self.task_list.sort(key=lambda tup: (tup[3], tup[0] ))

        self.print_task_list()

    def print_task_list(self):

        rospy.loginfo('--- PLANNED TASK LIST ---')

        for t in self.task_list:
            task_string = "-> o: " + t[1] + " b: " + t[2] + " n: " + str(t[0]) + " d: " + str(t[3])
            rospy.loginfo(task_string)

        rospy.loginfo('------------------------')


    def receive_update(self, goal):
        rospy.loginfo('Goal Received')
        value = goal.parameter

        if len(self.task_list) < 1:
            self._feedback.status = 1  # a status 1 means that there no more objects in the list
            self._result.status = self._feedback.status
            rospy.loginfo('Task list updated')
            self._as.set_succeeded(self._result)
            return
        if value > 0:
            if value == self.TASK_COMPLETED:
                self.task_list.pop(0)
            elif value == self.TASK_CANCELLED:
                self.task_list.pop(0)
            elif value == self.TASK_POSTPONED:
                task = self.task_list.pop(0)
                self.task_list.append(task)
        else: #The Task manager has to remove one object from the list

            if len(self.task_list) > 0:
                next_task = self.task_list[0]
                bin_content_new = []
                bin_here = self.bin_content[next_task[2]]


            for i in range(0, len(bin_here)):
                if i != -value:
                    bin_content_new.append(bin_here[i])
            self.bin_content[next_task[2]] = bin_content_new


        #set the feedback on the action (ACTIONLIB)
        self._feedback.status = 0  # a status 0 means that there are still objects in the list
        self._result.status = self._feedback.status
        rospy.loginfo('Task list updated')
        self._as.set_succeeded(self._result)


    def read_json_list(self, file_path):

        json_data = open(file_path)
        self.data = json.load(json_data)
        json_data.close()

        self.add_bin_content('bin_A')
        self.add_bin_content('bin_B')
        self.add_bin_content('bin_C')
        self.add_bin_content('bin_D')
        self.add_bin_content('bin_E')
        self.add_bin_content('bin_F')
        self.add_bin_content('bin_G')
        self.add_bin_content('bin_H')
        self.add_bin_content('bin_I')
        self.add_bin_content('bin_J')
        self.add_bin_content('bin_K')
        self.add_bin_content('bin_L')

        self.init_taks_list()

    def publish_next_task(self):
        while not rospy.is_shutdown():
            next_task_msg = '[empty,empty]'
            #next_bin_content = '[]'
            if len(self.task_list) > 0:
                next_task = self.task_list[0]
                next_task_msg = '[' + next_task[2] + "," + next_task[1] + ']'
                next_bin_content = self.bins[next_task[2]]

            self.pub.publish(next_task_msg)
            self.bin_pub.publish(str(next_bin_content))
            self.pub_rate.sleep()


    def get_bin_info(self,req):
        #next_bin_content = '[]'
        if len(self.task_list) > 0:
            next_task = self.task_list[0]
            next_bin_content =  self.bin_content[next_task[2]]
            print('Length: ' + str(len(next_bin_content)))
        return BinTriggerResponse(next_bin_content)


if __name__ == '__main__':
    rospy.init_node('objectslist')
    task_manager = TaskManager()
    rp = rospkg.RosPack()
    json_pkg = rospy.get_param('/json_file/package', 'amazon_challenge_bt_actions')
    json_relative_path = rospy.get_param('/json_file/relative_path', 'src/example.json')
    json_pkg_path = rp.get_path(json_pkg)
    json_path = json_pkg_path + '/' + json_relative_path
    task_manager.read_json_list(json_path)
    print(json_path)
    s = rospy.Service('bin_trigger', BinTrigger, task_manager.get_bin_info)
    task_manager.publish_next_task()
