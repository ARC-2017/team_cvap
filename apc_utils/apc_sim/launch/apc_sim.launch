<?xml version="1.0" encoding="utf-8"?>
<launch>
  
  <arg name="pick" default="true"/>
  <arg name="gazebo" default="false" doc="For selecting to do a gazebo/rviz simulation"/>
  <arg name="gazebo_gui" default="true" />
  <arg name="demo" default="apc_pick_task_simple" />

  <!-- param for indicating whether we are simulating with gazebo or not -->
  <param name="/apc/sim/gazebo" value="$(arg gazebo)" />

  <!-- dummy controller for head and suction gripper -->
  <node name="baxter_dummy_head_gripper_controller" pkg="apc_sim" type="baxter_dummy_head_gripper_controller.py" ns="/apc/sim"/>

  <!-- Robot URDF -->
  <param name="robot_description" command="$(find xacro)/xacro.py --inorder $(find calibration_data)/urdf/apc_baxter.urdf.xacro gazebo:=$(arg gazebo) pick:=$(arg pick)"/>


  <group if="$(arg gazebo)">
    <!-- bring up Gazebo simulation -->
    <include file="$(find baxter_gazebo)/launch/baxter_world.launch">
      <arg name="gui" value="$(arg gazebo_gui)"/>
      <arg name="load_robot_description" value="false"/>
    </include>

  </group> 

  <group unless="$(arg gazebo)" >

    <!-- dummy joint trajectory controller -->
    <node name="dummy_joint_trajectory_controller" pkg="baxter_moveit_config" type="dummy_joint_trajectory_controller">
      <remap from="/joint_states" to="/robot/joint_states" />
    </node>

    <!-- Robot state publisher -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen">
      <remap from="/joint_states" to="/robot/joint_states" />
    </node>    

  </group>


  <!-- load the object poses for gazebo -->
  <rosparam command="load" file="$(find apc_sim)/config/$(arg demo).yaml" ns="/apc/sim/gazebo_models"/>

  <!-- run the object spawner script for populating the shelf in gazebo-->
  <!-- and publish the corresponding TFs -->
  <node name="apc_gazebo_objects_spawner" pkg="apc_sim" type="apc_gazebo_objects_spawner" output="screen"/>

    <!-- shelf_front -->
  <include file="$(find calibration_publisher)/launch/calibration_publisher.launch">
    <arg name="source_frame" value="base"/>
    <arg name="target_frame" value="shelf_front"/>
    <arg name="calibration_file" value="$(find calibration_data)/extrinsics/shelf_front.txt" />
  </include>


</launch>
